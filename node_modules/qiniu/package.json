{
  "name": "qiniu",
  "version": "2.4.2",
  "description": "Node wrapper for Qiniu Resource (Cloud) Storage API",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/qiniu/nodejs-sdk.git"
  },
  "bugs": {
    "url": "https://github.com/qiniu/nodejs-sdk/issues"
  },
  "keywords": [
    "cloud",
    "storage",
    "s3",
    "qiniu",
    "web-service"
  ],
  "author": {
    "name": "qiniutek.com"
  },
  "contributors": [
    {
      "name": "Xu Shiwei",
      "email": "xushiweizh@gmail.com"
    },
    {
      "name": "why404",
      "email": "awhy.xu@gmail.com"
    },
    {
      "name": "ikbear",
      "email": "sunikbear@gmail.com"
    }
  ],
  "engines": [
    "node >= 0.4.7"
  ],
  "dependencies": {
    "mime": "1.2.7",
    "formstream": "0.0.2",
    "crc32": "0.2.2"
  },
  "devDependencies": {
    "should": "*",
    "pedding": "*",
    "mocha": "*"
  },
  "license": "MIT",
  "readme": "# Node wrapper for Qiniu Resource (Cloud) Storage API\n\n[![Build Status](https://travis-ci.org/qiniu/nodejs-sdk.png?branch=master)](https://travis-ci.org/qiniu/nodejs-sdk)\n\n![logo](http://qiniutek.com/images/logo-2.png)\n\n该 SDK 适用于 NodeJS 0.4.7 及其以上版本，基于 [七牛云存储官方API](/v3/api/) 构建。若您的服务端是一个基于 NodeJS 编写的网络程序，使用此 SDK ，能让您以非常便捷地方式将数据安全地存储到七牛云存储上。以便让您应用的终端用户进行高速上传和下载，同时也使得您的服务端更加轻盈。\n\njscoverage: [85%](http://fengmk2.github.com/coverage/qiniu.html)\n\n## 安装\n\n    npm install qiniu\n\n### 获取 ACCESS_KEY 和 SECRET_KEY\n\n要对接七牛云存储服务，您需要七牛云存储服务端颁发给您的 `ACCESS_KEY` 和 `SECRET_KEY`。`ACCESS_KEY` 用于标识客户方的身份，在网络请求中会以某种形式进行传输。`SECRET_KEY` 作为私钥形式存放于客户方本地并不在网络中传递，`SECRET_KEY` 的作用是对于客户方发起的具体请求进行数字签名，用以保证该请求是来自指定的客户方并且请求本身是合法有效的。使用 `ACCESS_KEY` 进行身份识别，加上 `SECRET_KEY` 进行数字签名，即可完成应用接入与认证授权。\n\n您可以通过如下步骤获得 `ACCESS_KEY` 和 `SECRET_KEY`：\n\n1. [开通七牛开发者帐号](https://dev.qiniutek.com/signup)\n2. [登录七牛开发者自助平台，查看 ACCESS_KEY 和 SECRET_KEY](https://dev.qiniutek.com/account/keys)\n\n获取到 `ACCESS_KEY` 和 `SECRET_KEY` 之后，您就可以参考下面的示例代码进行接入使用了。\n\n## 使用\n\nSDK 使用文档参考：[http://docs.qiniutek.com/v3/sdk/nodejs/](http://docs.qiniutek.com/v3/sdk/nodejs/)\n\n### 示例程序\n\n    var qiniu = require('qiniu');\n\n    // 配置密钥\n    qiniu.conf.ACCESS_KEY = '<Please apply your access key>';\n    qiniu.conf.SECRET_KEY = '<Dont send your secret key to anyone>';\n\n    // 实例化带授权的 HTTP Client 对象\n    var conn = new qiniu.digestauth.Client();\n\n    // 创建空间，也可以在开发者自助网站创建\n    var bucket = 'yet_another_bucket';\n    qiniu.rs.mkbucket(conn, bucket, function(resp) {\n        console.log(\"\\n===> Make bucket result: \", resp);\n        if (resp.code != 200) {\n            return;\n        }\n    });\n\n    // 实例化 Bucket 操作对象\n    var rs = new qiniu.rs.Service(conn, bucket);\n\n    // 上传文件第1步\n    // 生成上传授权凭证（uploadToken）\n    var opts = {\n        scope: \"yet_another_bucket\", // 可以是 \"<bucketName>\" 或 \"<bucketName>:<key>\"\n        expires: 3600,\n        callbackUrl: \"http://www.example.com/notifications/qiniurs\", // 可选\n        callbackBodyType: \"application/x-www-form-urlencoded\", // 可选\n    };\n    var uploadPolicy = new qiniu.auth.PutPolicy(opts);\n    var uploadToken = uploadPolicy.token();\n\n    // 上传文件第2步\n    // 组装上传文件所需要的参数\n    var key = __filename;\n    var localFile = key,\n        customMeta = \"\",\n        callbackParams = {\"bucket\": bucket, \"key\": key},\n        enableCrc32Check = false,\n        mimeType = mime.lookup(key);\n\n    // 上传文件第3步\n    // 上传文件\n    rs.uploadFileWithToken(uploadToken, localFile, key, mimeType, customMeta, callbackParams, enableCrc32Check, function(resp){\n        console.log(\"\\n===> Upload File with Token result: \", resp);\n        if (resp.code != 200) {\n            // ...\n            return;\n        }\n\n        // 查看已上传文件属性信息\n        rs.stat(key, function(resp) {\n            console.log(\"\\n===> Stat result: \", resp);\n            if (resp.code != 200) {\n                // ...\n                return;\n            }\n        });\n    });\n\n\n    // 获取文件下载链接（含文件属性信息）\n    var saveAsFriendlyName = key;\n    rs.get(key, saveAsFriendlyName, function(resp) {\n        console.log(\"\\n===> Get result: \", resp);\n        if (resp.code != 200) {\n            // ...\n            return;\n        }\n    });\n\n    // 删除已上传文件\n    rs.remove(key, function(resp) {\n        console.log(\"\\n===> Delete result: \", resp);\n    });\n\n    // 将bucket的内容作为静态内容发布\n    var DEMO_DOMAIN = bucket + '.dn.qbox.me';\n    rs.publish(DEMO_DOMAIN, function(resp){\n        console.log(\"\\n===> Publish result: \", resp);\n        if (resp.code != 200){\n            clear(rs);\n            return;\n        }\n    });\n\n    // 删除bucket，慎用！\n    rs.drop(function(resp){\n        console.log(\"\\n===> Drop result: \", resp);\n    });\n\n\n## 贡献代码\n\n1. Fork\n2. 创建您的特性分支 (`git checkout -b my-new-feature`)\n3. 提交您的改动 (`git commit -am 'Added some feature'`)\n4. 将您的修改记录提交到远程 `git` 仓库 (`git push origin my-new-feature`)\n5. 然后到 github 网站的该 `git` 远程仓库的 `my-new-feature` 分支下发起 Pull Request\n\n## 许可证\n\nCopyright (c) 2012 qiniutek.com\n\n基于 MIT 协议发布:\n\n* [www.opensource.org/licenses/MIT](http://www.opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "_id": "qiniu@2.4.2",
  "dist": {
    "shasum": "7fd0ff248d97665bfbaa91a301f06777d0b48f9e"
  },
  "_from": "qiniu@",
  "_resolved": "https://registry.npmjs.org/qiniu/-/qiniu-2.4.2.tgz"
}
